services:
  web:
    build: .
    container_name: django-cron-jobs-web
    entrypoint: ["/app/entrypoint.sh"]
    command: ["gunicorn", "--bind", ":8000", "phs_main_django.wsgi:application"]
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      RUN_MIGRATIONS: "true"
      RUN_COLLECTSTATIC: "true"
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: "${DB_NAME}"
      DB_USER: "${DB_USER}"
      DB_PASSWORD: "${DB_PASSWORD}"
      DJANGO_SUPERUSER_USERNAME: "${DJANGO_SUPERUSER_USERNAME}"
      DJANGO_SUPERUSER_PASSWORD: "${DJANGO_SUPERUSER_PASSWORD}"
      DJANGO_SUPERUSER_EMAIL: "${DJANGO_SUPERUSER_EMAIL}"
      LW_API_KEY: "${LW_API_KEY}"
      LW_SECRET_KEY: "${LW_SECRET_KEY}"
      LW_USERNAME: "${LW_USERNAME}"
      LW_PASSWORD: "${LW_PASSWORD}"
      DJANGO_SECRET_KEY: "${DJANGO_SECRET_KEY}"
      DEBUG: "${DEBUG}"
      ALLOWED_HOSTS: "${ALLOWED_HOSTS}"
      DJANGO_SETTINGS_MODULE: "${DJANGO_SETTINGS_MODULE}"
      CELERY_BROKER_URL: "${CELERY_BROKER_URL}"

  celery_worker:
    build: .
    container_name: django-cron-jobs-celery_worker
    entrypoint: ["/app/entrypoint.sh"]
    command: ["celery", "-A", "phs_main_django", "worker", "--loglevel=info"]
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
    depends_on:
      web:
        condition: service_started
    environment:
      RUN_MIGRATIONS: "false"
      RUN_COLLECTSTATIC: "false"
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: "${DB_NAME}"
      DB_USER: "${DB_USER}"
      DB_PASSWORD: "${DB_PASSWORD}"
      DJANGO_SUPERUSER_USERNAME: "${DJANGO_SUPERUSER_USERNAME}"
      DJANGO_SUPERUSER_PASSWORD: "${DJANGO_SUPERUSER_PASSWORD}"
      DJANGO_SUPERUSER_EMAIL: "${DJANGO_SUPERUSER_EMAIL}"
      LW_API_KEY: "${LW_API_KEY}"
      LW_SECRET_KEY: "${LW_SECRET_KEY}"
      LW_USERNAME: "${LW_USERNAME}"
      LW_PASSWORD: "${LW_PASSWORD}"
      DJANGO_SECRET_KEY: "${DJANGO_SECRET_KEY}"
      DEBUG: "${DEBUG}"
      ALLOWED_HOSTS: "${ALLOWED_HOSTS}"
      DJANGO_SETTINGS_MODULE: "${DJANGO_SETTINGS_MODULE}"
      CELERY_BROKER_URL: "${CELERY_BROKER_URL}"

  celery_beat:
    build: .
    container_name: django-cron-jobs-celery_beat
    entrypoint: ["/app/entrypoint.sh"]
    command: ["celery", "-A", "phs_main_django", "beat", "--loglevel=info"]
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
    depends_on:
      web:
        condition: service_started
    environment:
      RUN_MIGRATIONS: "false"
      RUN_COLLECTSTATIC: "false"
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: "${DB_NAME}"
      DB_USER: "${DB_USER}"
      DB_PASSWORD: "${DB_PASSWORD}"
      DJANGO_SUPERUSER_USERNAME: "${DJANGO_SUPERUSER_USERNAME}"
      DJANGO_SUPERUSER_PASSWORD: "${DJANGO_SUPERUSER_PASSWORD}"
      DJANGO_SUPERUSER_EMAIL: "${DJANGO_SUPERUSER_EMAIL}"
      LW_API_KEY: "${LW_API_KEY}"
      LW_SECRET_KEY: "${LW_SECRET_KEY}"
      LW_USERNAME: "${LW_USERNAME}"
      LW_PASSWORD: "${LW_PASSWORD}"
      DJANGO_SECRET_KEY: "${DJANGO_SECRET_KEY}"
      DEBUG: "${DEBUG}"
      ALLOWED_HOSTS: "${ALLOWED_HOSTS}"
      DJANGO_SETTINGS_MODULE: "${DJANGO_SETTINGS_MODULE}"
      CELERY_BROKER_URL: "${CELERY_BROKER_URL}"

  db:
    image: postgres:14
    container_name: django-cron-jobs-db
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: "${DB_USER}"
      POSTGRES_PASSWORD: "${DB_PASSWORD}"
      POSTGRES_DB: "${DB_NAME}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"

  rabbitmq:
    image: rabbitmq:4.0.3-management
    container_name: django-cron-jobs-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_DEFAULT_USER}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_DEFAULT_PASS}"
    volumes:
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  db_data:
  static_volume:
