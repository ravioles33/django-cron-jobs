# django-cron-jobs/docker-compose.yml
version: '3.8'

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    command: >
      sh -c "./wait-for-it.sh db:5432 -- ./wait-for-it.sh rabbitmq:5672 -- python manage.py migrate && \
             python manage.py collectstatic --no-input && \
             gunicorn phs_main_django.wsgi:application --bind 0.0.0.0:8000 --workers 3"
    volumes:
      - .:/app
    env_file:
      - .env
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:

  db:
    image: postgres:14
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "15672:15672"
      - "5672:5672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest

  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: sh -c "./wait-for-it.sh db:5432 -- ./wait-for-it.sh rabbitmq:5672 -- celery -A phs_main_django worker --loglevel=info"
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:

  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    command: sh -c "./wait-for-it.sh db:5432 -- ./wait-for-it.sh rabbitmq:5672 -- celery -A phs_main_django beat --loglevel=info"
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:

volumes:
  postgres_data:
